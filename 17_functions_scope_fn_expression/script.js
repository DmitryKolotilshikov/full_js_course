// Functions - scope, default values, declaration vs expression

/* 
–í—ã–±–æ—Ä –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
–§—É–Ω–∫—Ü–∏—è ‚Äì —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ. –ü–æ—ç—Ç–æ–º—É –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—ã—á–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –≥–ª–∞–≥–æ–ª–æ–º. –û–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º, —Ç–æ—á–Ω—ã–º –∏ –æ–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —á–∏—Ç–∞—Ç—å –∫–æ–¥, –ø–æ–ª—É—á–∏–ª –≤–µ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è.

–ö–∞–∫ –ø—Ä–∞–≤–∏–ª–æ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≥–ª–∞–≥–æ–ª—å–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã, –æ–±–æ–∑–Ω–∞—á–∞—é—â–∏–µ –æ–±—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª–µ–¥—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏–µ. –û–±—ã—á–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è, –∫–∞—Å–∞—é—â–∏–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–π —ç—Ç–∏—Ö –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤.

–ù–∞–ø—Ä–∏–º–µ—Ä, —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "show" –æ–±—ã—á–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç.

–§—É–Ω–∫—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å‚Ä¶

"get‚Ä¶" ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –∑–Ω–∞—á–µ–Ω–∏–µ,
"calc‚Ä¶" ‚Äì —á—Ç–æ-—Ç–æ –≤—ã—á–∏—Å–ª—è—é—Ç,
"create‚Ä¶" ‚Äì —á—Ç–æ-—Ç–æ —Å–æ–∑–¥–∞—é—Ç,
"check‚Ä¶" ‚Äì —á—Ç–æ-—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ª–æ–≥–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏ —Ç.–¥.
–ü—Ä–∏–º–µ—Ä—ã —Ç–∞–∫–∏—Ö –∏–º—ë–Ω:

showMessage(..)     // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
getAge(..)          // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª—É—á–∞—è –µ–≥–æ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º)
calcSum(..)         // –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
createForm(..)      // —Å–æ–∑–¥–∞—ë—Ç —Ñ–æ—Ä–º—É (–∏ –æ–±—ã—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë)
checkPermission(..) // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø, –≤–æ–∑–≤—Ä–∞—â–∞—è true/false

–û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è ‚Äì –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —è–≤–Ω–æ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ–º. –ò —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º.
*/

const log = console.log;

// --------- Function declaration vs Function expression ---------------

// Function declaration - –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–æ –µ–µ –æ–±—å—è–≤–ª–µ–Ω–∏—è
/* 
Function Declaration: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π ¬´function‚Ä¶¬ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∫–æ–¥–∞.

Function Declaration –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω–∞ —Ä–∞–Ω—å—à–µ, —á–µ–º –æ–Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∞. 
*/

greeting();

function greeting() {
    log("Hello friends [1]");
}

/* 
Function Expression: —Ñ—É–Ω–∫—Ü–∏—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. 

Function Expression —Å–æ–∑–¥–∞—ë—Ç—Å—è, –∫–æ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –Ω–µ–≥–æ, –∏ –∑–∞—Ç–µ–º —É–∂–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.
*/

// greetingFn(); // error

const greetingFn = function greeting() {
    log("Hello friends [2]");
}

greetingFn();

// ------------ Scope (–û–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏) ------------

 // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ (global scope)
const num1 = 10;

//  {} - –æ–±—ä—è–≤–ª—è—é—Ç –ª–æ–∫–∞–ª—å–Ω—É—é (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é) –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
{
    // local scope
    const num2 = 20;
    log(num2);
    log(num1);
    var num3 = 100; // var - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
}

log(num1);
// log(num2); // error
log(num3);

function showScopeExample() {
    const num4 = 1000;
    log("showScopeExample: ", num1, num4);

    function nestedFn() {
        const num5 = 3000;
        log("nestedFn: ", num4, num5);
    }

    nestedFn();
}

showScopeExample();
// nestedFn(); // error
// log(num4); // error

// ------------ Default values - –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ------------

// function formatGreeting(name, emoji = "üëΩ") {
//     log(`Hello ${name} ${emoji}`);
// }

function formatGreeting(name, emoji = "üëΩ") {
    return `Hello ${name} ${emoji}`;
}

formatGreeting("Dmitry", "üí•");
formatGreeting("Dmitry");

const formattedGreeting = formatGreeting("Dmitry", "üòäüí•üòä");
log(formattedGreeting);