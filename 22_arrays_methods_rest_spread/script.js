// Arrays (–ú–∞—Å—Å–∏–≤—ã) - for of, –º–µ—Ç–æ–¥—ã, –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è, spread, rest

const styles = `background: lightsalmon;`
const log = console.log;

const cars = ["audi", "ford", "mercedes", "mazda", "tesla"];

const users = [
    { id: 1, name: "Alex", age: 35, position: "manager" },
    { id: 2, name: "Kate", age: 22, position: "qa" },
    { id: 3, name: "Nikita", age: 29, position: "developer" },
];

// for of (—Ü–∏–∫–ª –ø–æ –º–∞—Å—Å–∏–≤—É)

for (const car of cars) {
    log(`Car -> ${car}`);
}
for (const user of users) {
    log(`User -> ${user.name} ${user.age} ${user.position}`);
}
// -------------- –ú–µ—Ç–æ–¥—ã -----------------

const numbers1 = [4, 33, 2, 1];

log(numbers1.sort((a, b) => a - b)); // sort - –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
log(numbers1);
log("Reverse ", numbers1.reverse()); // reverse - –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤
log("Reverse ", numbers1);

const numbers2 = [4, 33, 2, 1];

const newNumbers2 = numbers2.toSorted((a, b) => a - b); // toSorted - –¥–µ–ª–∞–µ—Ç –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
log(newNumbers2);
log(numbers2);
log("toReversed ", numbers2.toReversed()); // toReversed - –¥–µ–ª–∞–µ—Ç –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞
log("toReversed ", numbers2);

// ------------------

const newCars = ["nissan", "volvo"];

const allCars = cars.concat(newCars); // concat - –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É –¥—Ä—É–≥–∏–µ –º–∞—Å—Å–∏–≤—ã

log(allCars);

log(allCars.toString()); // toString - –ø—Ä–æ—Å—Ç–æ –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
log(allCars.join()); // join - –¥–µ–ª–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
log(allCars.join(''));
log(allCars.join(','));
log(allCars.join('-'));

// -----------------

const nestedArrays = [1, 2, [3, 4], [5, 6], [7, [8, 9]], 10];

log(nestedArrays);
log(nestedArrays[2][0]); // 3
log(nestedArrays[3][1]); // 6
log(nestedArrays[4][1][0]); // 8

log(nestedArrays.flat()); // flat - –¥–µ–ª–∞–µ—Ç –ø–ª–æ—Å–∫–∏–º –º–∞—Å—Å–∏–≤
log(nestedArrays.flat(2));
log(nestedArrays.flat(Infinity));

// ------------------

log(cars.includes("audi")); // –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false
log(cars.includes("lada"));

log(cars.at(1)); // at - –≤–æ–∑—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
log(cars.at(-1)); 

// -------- static methods (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –æ–±—ä–µ–∫—Ç–∞/–∫–ª–∞—Å—Å–∞ Array) ----------

const num = 123;

log(Array.isArray(cars)); // Array.isArray - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–æ–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false
log(Array.isArray(num));

const arrayOf = Array.of(1, 2, "hello"); // Array.of - —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
log(arrayOf);

const arrayFrom = Array.from("12345"); // Array.from - —Å–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –∏—Ç–µ—Ä–∏—Ä—É–µ–º—ã—Ö –º–∞—Å—Å–∏–≤–æ-–ø–æ–¥–æ–±–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å—Ç—Ä–æ–∫–∞, SET, MAP, –ú–∞—Å—Å–∏–≤)
log(arrayFrom);

// ------------ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è ------------

/* 
–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ ‚Äì —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∫–æ—Ç–æ—Ä—ã–π
–ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–º ¬´—Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å¬ª –º–∞—Å—Å–∏–≤—ã –∏–ª–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö,
—Ç–∞–∫ –∫–∞–∫ –∏–Ω–æ–≥–¥–∞ –æ–Ω–∏ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã.
–î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—â–µ–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –º–∞—Å—Å–∏–≤, –∞ —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä—É–µ—Ç –Ω—É–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
*/

const names = ["Alex", "Mike", "Angelina"];
const names2 = ["Kate"];

// const nameAlex = names[0];
// const nameMike = names[1];

const [nameAlex, nameMike] = names;
const [nameKate, nameOlga = "Olga"] = names2;

log(names);
log(nameAlex);
log(nameMike);

log(nameKate);
log(nameOlga);

/* 
–ö–æ—Ä—Ç–µ–∂ ‚Äî —ç—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–π.
*/

// const [counter, setCounter] = useState(0); // –ü—Ä–∏–º–µ—Ä –∏–∑ React


// ------------ spread (–æ–ø–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è) ------------

const allNames = [...names, "Nik", ...names2];
log(allNames);

const strHello = "Hello";
log([...strHello]);

const allNumbers = [1, 55, 9, 33, 124, 765, 0, 3, 4];

log(Math.max(...allNumbers));

// ------------ rest (–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã) ------------

const sum = (...numbers) => {
    let sum = 0;
    
    for (const value of numbers) {
        sum += value;
    }

    return sum;
}

log(sum(1, 2, 3, 4, 5));

const [firstName, ...restNames] = names;

log(firstName, restNames);

// –û—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ !

// const fn = (arg1, ...rest, arg2) => {
//  // Error
// }

const getTitleAndDescription = (name, ...description) => {
    log(`%c${name}`, styles);
    
    for (const value of description) {
        log(`${value} üí•`);
    }
}

getTitleAndDescription("JavaScript", "- –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è", "- –ù–∞ –Ω–µ–º –º–æ–∂–Ω–æ –∫–æ–¥–∏—Ç—å —Ñ—Ä–æ–Ω—Ç –∏ –±—ç–∫, –º–æ–± –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏–≥—Ä—ã, –¥–µ–∫—Å—Ç–æ–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã", "- –≥–∏–±–∫–∏–π –∏ –æ—á–µ–Ω—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–π");
