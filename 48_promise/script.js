// promise

// -------------- promise (–±–∞–∑–∞) --------------

// const promise = new Promise((resolve, reject) => resolve("Hello"));
// promise.then((message) => console.log(message));

// const promise = new Promise((resolve, reject) => reject("Error!!!"));
// promise.then((message) => console.log(message), (errorMessage) => console.log(errorMessage));

// const promise = new Promise((resolve, reject) => reject(new Error("Error!!!")));
// promise.then((message) => console.log(message), (error) => console.log(error.message));

// -------------- then, catch, finally --------------

const myPromise = new Promise((resolve, reject) => {
    // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
    setTimeout(() => {
        const success = true;

        if (success) {
            resolve("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        } else {
            reject("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!");
        }
    }, 2000);
});

myPromise
    .then((result) => {
        console.log(result); // success (–µ—Å–ª–∏ resolve)
    })
    .catch((error) => {
        console.error(error); // error (–µ—Å–ª–∏ reject)
    })
    .finally(() => { 
        console.log("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏."); // –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Å–µ–≥–¥–∞
    });

// -------------- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É (—Å–∏–º—É–ª—è—Ü–∏—è) --------------

const fetchData = () => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const data = { id: 1, name: "Dmitry" };
            resolve(data);
        }, 1000);
    });
}

fetchData()
    .then((data) => {
        console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data);
    })
    .catch((error) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    })

// -------------- –¶–µ–ø–æ—á–∫–∞ Promise --------------

const step1 = new Promise((res) => setTimeout(() => res("–®–∞–≥ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω"), 1000))
const step2 = new Promise((res) => setTimeout(() => res("–®–∞–≥ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω"), 1000))
const step3 = new Promise((res) => setTimeout(() => res("–®–∞–≥ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω"), 1000))

step1
    .then((result) => {
        console.log(result);
        return step2;
    })
    .then((result) => {
        console.log(result);
        return step3;
    })
    .then((result) => {
        console.log(result);
        console.log("–í—Å–µ —à–∞–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!");
    });

// -------------- üçè –ú–ï–¢–û–î–´ üçè--------------
// -------------- Promise.all --------------

// Promise.all - –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–æ–º–∏—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è, –ø–æ–∫–∞ –≤—Å–µ –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—Å—è.

const step4 = new Promise((res, rej) => setTimeout(() => rej("–®–∞–≥ 4 —Å–ª–æ–º–∞–ª—Å—è"), 1000))

Promise.all([step1, step2, step3])
    .then((results) => {
        console.log("[Promise.all] –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:", results);
    })
    .catch((err) => {
        console.error("[Promise.all] –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–±–µ—â–∞–Ω–∏–π:", err);
    });

// -------------- Promise.allSettled --------------

/* 
–ú–µ—Ç–æ–¥ Promise.allSettled –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤. 

–í –º–∞—Å—Å–∏–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç:
{status:"fulfilled", value:—Ä–µ–∑—É–ª—å—Ç–∞—Ç} –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π,
{status:"rejected", reason:–æ—à–∏–±–∫–∞} –¥–ª—è –æ—à–∏–±–æ–∫.
*/

Promise.allSettled([step1, step2, step3, step4])
    .then((results) => {
        console.log("[Promise.allSettled] –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:", results);
    })
    .catch((err) => {
        console.error("[Promise.allSettled] –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–±–µ—â–∞–Ω–∏–π:", err);
    });

// -------------- Promise.any --------------
// –ú–µ—Ç–æ–¥ Promise.any –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ –∏–ª–∏
// –∫–æ–≥–¥–∞ –≤—Å–µ –ø—Ä–æ–º–∏—Å—ã reject

Promise.any([step1, step2, step3, step4])
    .then((results) => {
        console.log("[Promise.any] –í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–≤—ã–π:", results);
    })
    .catch((err) => {
        console.error("[Promise.any] –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–±–µ—â–∞–Ω–∏–π:", err);
    });

// -------------- Promise.race --------------
// –ú–µ—Ç–æ–¥ Promise.race –≤—Å–µ–≥–¥–∞ –∂–¥—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–º–∏—Å–∞ –±—É–¥–µ—Ç –ª–∏ –æ–Ω resolve –∏–ª–∏ reject.

Promise.race([step1, step2, step3, step4])
    .then((results) => {
        console.log("[Promise.race] –í—ã–ø–æ–ª–Ω–µ–Ω –ø–µ—Ä–≤—ã–π:", results);
    })
    .catch((err) => {
        console.error("[Promise.race] –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –æ–±–µ—â–∞–Ω–∏–π:", err);
    });
